import { Votes } from './../components/Votes';
import type { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { trpc } from '../utils/trpc';
import { Post } from '@prisma/client';
import { useRouter } from 'next/router';
import PostedBy from '../components/PostedBy';

const Home: NextPage = () => {
	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main className='container mx-auto min-h-screen p-4'>
				<Posts />
			</main>
		</>
	);
};

interface PostWithUser extends Post {
	user: {
		name: string | null;
	};
	_count: {
		comments: number;
	};
}

const Posts = () => {
	const { data: posts, isLoading } = trpc.useQuery(['post.getAll']);

	if (isLoading) return <div>Loading...</div>;

	return (
		<>
			{posts?.map((p, i: number) => {
				return <SinglePost key={i} post={p} showDelete={true} />;
			})}
		</>
	);
};

export const SinglePost = ({
	post,
	showDelete,
}: {
	post: Omit<PostWithUser, 'updatedAt' | 'userId'>;
	showDelete: boolean;
}) => {
	const router = useRouter();
	const ctx = trpc.useContext();
	const deletePost = trpc.useMutation('post.deletePost', {
		onMutate: () => {
			ctx.cancelQuery(['post.getAll']);
			ctx.cancelQuery(['post.getOne']);

			const optimisticUpdate = ctx.getQueryData(['post.getAll']);
			if (optimisticUpdate) {
				ctx.setQueryData(['post.getAll'], optimisticUpdate);
			}
		},
		onSettled: () => {
			ctx.invalidateQueries(['post.getAll']);
		},
	});

	return (
		<div className='bg-base-200 border-[1px] border-gray rounded-md p-4 mb-3 flex'>
			<Votes votes={post.votes} />
			<div>
				<Link href={`/${post.id}`}>
					<div className='cursor-pointer'>
						<PostedBy
							name={post.user.name ? post.user.name : ''}
							date={post.createdAt}
						/>
						<h2 className='text-xl mb-2'>{post.title}</h2>
						<p className=''>{post.body}</p>
					</div>
				</Link>
				<div className='flex gap-3 mt-3 items-center'>
					<p className='text-gray'>{post._count.comments} comments</p>
					<p>Save Post</p>
					{showDelete ? (
						<>
							<button
								className='btn btn-ghost btn-sm'
								onClick={() => router.push(`/edit/${post.id}`)}>
								Edit
							</button>
							<button
								className='btn btn-primary btn-sm'
								type='button'
								onClick={() => {
									deletePost.mutate({
										id: post.id,
									});
									router.push('/');
								}}>
								Delete
							</button>
						</>
					) : null}
				</div>
			</div>
		</div>
	);
};

export default Home;
